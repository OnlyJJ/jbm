package com.lm.jbm.utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.lang.StringUtils;

import com.lm.jbm.service.JmService;
import com.lm.jbm.thread.LoginThread;

public class RandomUtil {
	public static ConcurrentHashMap<String, String> nameMap = new ConcurrentHashMap<String, String>(512);
	public static final String[] ips = {
		"120.15.129.117",
		"120.15.129.118",
		"120.15.125.119",
		"120.9.125.123",
		"120.9.122.117",
		"120.15.144.155",
		"120.193.158.91",
		"120.193.252.166",
		"120.202.118.183",
		"120.229.126.123",
		"120.229.131.23",
		"120.236.173.94",
		"120.236.61.118",
		"120.239.162.172",
		"120.239.18.18",
		"120.3.163.13",
		"120.3.234.198",
		"120.37.40.148",
		"120.4.9.218",
		"120.85.87.212",
		"121.10.59.168",
		"121.17.117.114",
		"121.20.217.188",
		"121.207.17.21",
		"121.207.75.156",
		"121.22.243.145",
		"121.224.183.71",
		"121.226.252.23",
		"121.227.1.145",
		"121.236.119.29",
		"121.238.36.19",
		"121.32.193.27",
		"121.33.175.134",
		"121.33.33.132",
		"121.33.48.183",
		"121.35.202.24",
		"121.62.184.219",
		"121.62.220.78",
		"121.69.46.34",
		"122.143.20.17",
		"122.192.14.37",
		"122.195.136.22",
		"122.224.34.14",
		"122.224.52.136",
		"122.228.60.134",
		"122.233.110.159",
		"122.244.50.6",
		"122.70.145.182",
		"122.96.42.26",
		"122.97.178.214",
		"123.103.15.112",
		"123.115.99.159",
		"123.13.204.155",
		"123.135.243.119",
		"123.138.153.139",
		"123.138.228.169",
		"123.138.232.231",
		"123.147.244.134",
		"123.147.244.19",
		"123.147.244.191",
		"123.147.246.241",
		"123.147.250.144",
		"123.149.34.115",
		"123.149.86.139",
		"123.15.160.158",
		"123.158.205.163",
		"123.171.13.108",
		"123.179.253.146",
		"123.4.118.126",
		"123.52.219.174",
		"123.5.232.176",
		"123.7.30.221",
		"124.116.241.12",
		"124.126.224.217",
		"124.129.196.224",
		"124.130.85.217",
		"124.135.104.79",
		"124.160.153.57",
		"124.160.212.42",
		"124.160.215.31",
		"124.160.219.46",
		"124.163.231.182",
		"124.164.243.132",
		"124.165.143.72",
		"124.166.38.24",
		"124.200.106.95",
		"124.207.50.22",
		"124.227.55.97",
		"124.228.155.110",
		"124.228.19.22",
		"124.238.204.16",
		"124.239.251.14",
		"124.31.62.17",
		"124.72.51.18",
		"124.90.187.92",
		"125.39.30.15",
		"125.45.231.186",
		"125.65.222.21",
		"125.71.55.20",
		"125.72.45.112",
		"125.73.78.101",
		"125.73.93.129",
		"125.75.76.35",
		"125.76.128.122",
		"125.76.135.179",
		"125.79.67.4",
		"125.80.188.152",
		"125.82.186.14",
		"125.85.186.162",
		"125.85.186.24",
		"125.85.186.22",
		"125.91.49.146",
		"125.94.232.39",
		"139.189.155.142",
		"139.205.228.20",
		"139.206.193.30",
		"139.212.219.26",
		"139.214.99.41",
		"140.206.89.157",
		"140.240.27.72",
		"144.0.22.18",
		"153.34.21.35",
		"163.179.0.236",
		"171.105.232.213",
		"171.105.34.184",
		"171.106.2.73",
		"171.109.182.149",
		"171.111.92.132",
		"171.115.151.183",
		"171.11.72.19",
		"171.12.1.196",
		"171.12.3.22",
		"171.13.187.83",
		"171.221.143.169",
		"171.38.246.57",
		"171.40.144.26",
		"171.44.174.224",
		"171.8.18.18",
		"171.82.219.128",
		"175.12.144.23",
		"175.12.96.148",
		"175.146.37.122",
		"175.149.68.154",
		"175.15.144.113",
		"175.167.174.68",
		"175.167.58.170",
		"175.17.22.128",
		"175.19.130.11",
		"175.19.130.172",
		"175.19.51.175",
		"175.19.53.135",
		"175.19.54.185",
		"175.43.183.39",
		"180.103.220.11",
		"180.104.230.54",
		"180.126.145.167",
		"180.143.82.169",
		"180.156.41.151",
		"180.162.177.72",
		"180.230.36.194",
		"180.95.195.23",
		"181.92.139.66",
		"182.105.47.11",
		"182.114.5.188",
		"182.127.142.134",
		"182.139.208.55",
		"182.147.56.44",
		"182.151.166.174",
		"182.203.155.46",
		"182.207.216.161",
		"182.247.251.36",
		"182.38.140.120",
		"182.41.114.12",
		"182.45.29.71",
		"182.85.15.166",
		"182.90.221.144",
		"182.90.223.66",
		"182.97.184.220",
		"183.0.91.125",
		"183.150.36.77",
		"183.154.177.13",
		"183.157.160.14",
		"183.158.222.28",
		"183.162.3.21",
		"183.167.178.72",
		"183.167.211.111",
		"183.1.77.114",
		"183.197.43.27",
		"183.198.201.117",
		"183.198.34.15",
		"183.202.161.149",
		"183.202.208.90",
		"183.202.209.146",
		"183.202.209.61",
		"183.202.64.20",
		"183.204.45.80",
		"183.205.135.197",
		"183.205.140.66",
		"183.206.175.112",
		"183.208.28.10",
		"183.211.184.175",
		"183.212.144.128",
		"183.213.207.173",
		"183.214.111.143",
		"183.214.147.137",
		"183.214.190.120",
		"183.214.23.16",
		"183.2.200.15",
		"183.22.25.198",
		"183.223.149.117",
		"183.225.68.37",
		"183.226.14.19",
		"183.226.166.15",
		"183.234.194.130",
		"183.236.19.169",
		"183.236.19.74",
		"183.240.19.26",
		"183.240.20.25",
		"183.240.27.217",
		"183.245.221.23",
		"183.248.81.183",
		"183.35.203.41",
		"183.36.31.210",
		"183.39.53.12",
		"183.40.6.17",
		"183.50.98.182",
		"183.53.132.13",
		"183.95.51.63",
		"202.109.166.116",
		"202.109.166.119",
		"202.109.166.120",
		"209.35.30.210",
		"210.21.228.112",
		"210.21.228.112",
		"210.21.68.33",
		"211.142.199.185",
		"211.142.221.52",
		"211.94.234.148",
		"220.168.132.106",
		"220.171.138.11",
		"220.172.55.143",
		"220.175.19.204",
		"220.184.23.139",
		"220.195.64.52",
		"220.195.64.145",
		"220.195.65.174",
		"220.198.240.136",
		"220.202.152.178",
		"221.11.63.86",
		"221.13.63.114",
		"221.180.251.71",
		"221.192.179.130",
		"221.193.0.145",
		"221.193.193.31",
		"221.197.245.18",
		"221.203.194.87",
		"221.207.37.16",
		"221.207.37.141",
		"221.209.36.145",
		"221.211.86.46",
		"221.2.225.120",
		"221.7.7.43",
		"222.189.192.12",
		"222.216.23.143",
		"222.246.184.192",
		"222.38.200.18",
		"222.69.184.134",
		"222.79.238.123",
		"222.88.203.118",
		"222.92.1.194",
		"222.92.159.216",
		"223.10.141.24",
		"223.10.147.145",
		"223.104.12.228",
		"223.104.12.72",
		"223.104.15.217",
		"223.104.170.125",
		"223.104.170.46",
		"223.104.170.184",
		"223.104.17.222",
		"223.104.177.152",
		"223.104.189.225",
		"223.104.189.178",
		"223.104.22.127",
		"223.104.238.199",
		"223.104.24.156",
		"223.104.24.163",
		"223.104.255.165",
		"223.104.63.167",
		"223.104.63.238",
		"223.104.63.251",
		"223.104.94.143",
		"223.104.94.63",
		"223.104.95.44",
		"223.104.95.82",
		"223.112.202.132",
		"223.112.202.204",
		"223.113.11.162",
		"223.113.52.13",
		"223.11.45.134",
		"223.153.22.141",
		"223.155.170.12",
		"223.199.219.242",
		"223.208.105.33",
		"223.214.51.212",
		"223.215.82.232",
		"223.220.140.153",
		"223.220.140.55",
		"223.64.74.186",
		"223.73.135.84",
		"223.73.135.94",
		"223.73.238.214",
		"223.73.60.163",
		"223.73.60.27",
		"223.74.109.14",
		"223.74.34.17",
		"223.74.82.243",
		"223.74.82.53",
		"223.75.11.143",
		"223.79.82.217",
		"223.84.205.133",
		"223.86.232.6",
		"223.86.85.77",
		"223.89.189.173",
		"223.96.157.113",
		"223.97.132.217",
		"223.99.54.183",
		"223.99.57.162"
	};
	
	public static String[] one = {"恩","黑","毒","傲","浪","秽","妍","沅","瞳","谁","柒","歖","譆","枯","安","瞒","等","黏","殇.","渗","憐","嗯","囍","放","沉","瘾","叚","槿","怂","吟","碍","寂","呸","敷","绝","嘘","奢","逗","凉","昔","遇","素","饿","亡","噬","單","暮","瞳","岛","窿","嚎","傲","高","欢","乐","野","骚","蔍","曦","朤","私","艺","美","酥","离","烈","腻","癮","废","青","醉","孽","憩","槿","悸","独","走","沸","毁","帅","朝","统","怹","狂","装","宥","止","茜","盲","稚","毒","黎","亂","肆","精","柠","噩","陌","殘","伪","噤","丧","嘘","癮","废","傀","惜","孽","槿","悸","隐","碎","疚","怼","藥","咒","浪","怂","朕","哑","闹","辜","劫","俗","傲","魂","戏","慕","白","堕","墓","忌","烬","隅","慦 ","怣","忐","忑","蜕","哄","倦","爬","久"};
	public static String[] two = {"孤者","柠凉","卷鬓","热吻","笑脸","初柚*","散落","良辰","厌世","贪世","放生","世俗","倒带","叛逆","脆弱","孤身","孤刺","禁锢","深碍","遣心","丑态","游魂","情丝","依赖","泪眼","莺语","清悦","空城","浪潮","转角","独瘾","皱眉","温婉","挽发","诱惑","囚鸟","烫嘴","断点","衬心","妄念","夏末","猫弦","情伤","情愫","情满","浊泪","浅笑","救赎","失意","流苏","配角","热水","迎夏","梦魇","懦弱","爱惜","湉晨","北觅","东寻","戒躁","消逝","过客","无畏","长安","征途","心抑","现实","拒丧","魇九","另类","旧故","难处","深腻","寒潮","听孤","薄荷","幼稚","清晓","风尘","诉说","舌味","自赎","亵渎","辞取","纵行","凉墨","绅士","善变","哑巴","贪生","砒霜","寡言","忘羡","偏执","败类","任性","大牌","识趣","无憾","取悦","沉醉","普通","妩媚","涟漪","旖旎","南笙","皆叹","夏倦","冬眠","奶包","巴卫","锦鲤","玉女","放鹤","得云","玉兔","昏君","幼虎","芝士","尤人","欲仙","浮生","缠绵","炽热","清明","河图","春野","棠绾","南音","良辰","君赋","抬举","闲云","念旧","单杀","孽徒","过客","君顾","殊荣","知返","鹤绝","传韵","洒脱","逆战","情言","误叹","木白","夏目","折枝′","楹曦","雾月","疚爱","颤吻","单野","眼杂","玄鸟","苏烟","零帝","择终","心奴","杼惘","初弋i","衣冢i","恋土","庸俗","山丘","戏江","院长","猎场","莫离","文少","点点","永平","微笑","暗恋","旧情","多余","情殇","救赎","腾龙","良生","霸道","回头","莫逆","颜熙","寻欢","河北","毒药","十七","无趣","温情","縌亂","北念","寻找","听风","嘿嘿","人渣","沐北","管我","錆酒","情仙","北梦","妄为","仄言","寒塘","哈喽","王宁","尐希","清君","十一","也许","陈晨","韬哥","山鬼","怪咖","义哥","俏皮","残冬","林熙","猫性","狂飙","爱你","屍魂","殊荣","参商","冷漠","酒渣","劫难","鬼圣","痞笑","小猪欲望","张杰","渡恶","倾城","空痕","柚子","情兽","野病","泪奔","无心","杰杰","月华","呵呵","共勉","换心","污啊","不合","冷暖","小生","城府","啊呀","焱焱","小喜","断情","厌倦","单飞","小痴"};
	public static String[] thr = {"半符堙","蔺玄觞","九天雪","萧墨尘","凤净松","慕笛安","龙宇昊","十里寂","蔺玄觞","九天雪","萧墨尘","凤净松","慕笛安","十里寂","慕凝枫","骨哀引","云熙然","南承曜","龙吟凤","断秋风","凝残月","暮成雪","易眸落","凌风啸","安卿尘","逆风昊","枫无痕","玄墨染","秦楚殇","三千寒","狄云义","宁陌夙","半符堙","难治愈","到不了","挽青丝","念花祭","别爱她","倒计时","丑八怪","小满足","茉莉花","久夏青","风如歌","别凑活","新鲜感","他不懂","旧情人","战痘族","大儿童","病怏怏","凉透心","算了吧","别强撑","心太闹","空自许","独命唱","无辜者","已别去","局外人","心太野","空口言","哎哟喂","顾及我","不然呢","孤独症","旧面容","假洒脱","旧照片","千里寻","难忘怀","别殷勤","枕头人","无所谓","海未深"};
	public static String[] nogroup = {"惦 念 ╰","゛微笑↘","沧颜▃","—━╋う夜声╰☆╮","゛若久","凝眸う","花 逝╮","強荵▃","爱笑じ","放手 گق","邂逅♛","玩家L-","狂☆神","ゝ九夜°","′芈妖。"," ◤血煞◢ヽ","﹏颜汐ぐ","_____浅沫°","、玩 具","ザ琉璃","偷心者※","君莫邪","愁千缕","情花开◎","离人醉","水无忧","小*顽*固","黒禮菔℡","ミ﹏泡小糖","翠花哥＠","君子傲つ","祂丶佷羙"," 朕很萌′","爱___再生。","愿君惜","南风瑾、","欧美范i","寻爱人╮","冷月魄","南笙离","丶格子夏°","煙花碎·","で毛毛熊","酒、麻醉","墨瞳殇"," 必須丶浪","血屠手","梦、旧了","℡离城梦","﹀梦里花","离心控°","想、未来","冰琉璃◕‿◕","清风渡","别猜心","执风挽","戏︶￣蓜角","蔸蔸゛猫⿺"};
	public static String[] fuhao = {"※","(⊙﹏⊙)b",":-D","❤","☜","☝","★","☺","☀","☚","☟","☛","♦","☆","♈","♉","♊","♋","♌","♎","♏","♐","♑","♓","♒","♍","❃","❀","✿","❉","❈","✲","＊","*","☸","❤","☠","ㄲ","ㅎ","ㅍ","ㄲㅃ","ㅆ","ㅂ","ㅁ","ㄹ","ㄷ","ㄴㄱ","ㅇ","ㅈ","ㅊ","ㅋ","ㅌ","ㅒ","ㅐ","ㅟㅠ","ㅛㅗ","ㅓ","ㅖ","ㅖ","㉵","㉴","㈁","㈀","㈀","㈆","㈊","つ","てこ","㊣","☯","✈","*","＊"};
	
	
	public static String getUserIp(String userId) {
		if(LoginThread.ipMap.containsKey(userId)) {
			return LoginThread.ipMap.get(userId);
		}
		return getIp();
	}
	
	public static String getIp() {
		int index = new Random().nextInt(ips.length);
		return ips[index];
	}
	
	public static String[] getUserIds(String key) {
		String userId = PropertiesUtil.getValue(key);
		if(StringUtils.isNotEmpty(userId)) {
			String[] userIds = userId.split(",");
			return userIds;
		}
		return null;
	}

	
	public static String getListener() {
		String listener = PropertiesUtil.getValue("listener");
		if(StringUtils.isNotEmpty(listener)) {
			return listener;
		}
		return "";
	}
	
	public static String getRoomId() {
		String roomId = PropertiesUtil.getValue("roomId");
		if(StringUtils.isNotEmpty(roomId)) {
			String[] roomIds = roomId.split(",");
			int index = new Random().nextInt(roomIds.length);
			return roomIds[index];
		}
		return "";
	}
	
	public static String getPwd() {
		String pwd = PropertiesUtil.getValue("pwd");
		if(StringUtils.isNotEmpty(pwd)) {
			return pwd;
		}
		return "";
	}
	
	public static int getTotal() {
		int total = Integer.parseInt(PropertiesUtil.getValue("total"));
		return total;
	}
	
	public static int getRandom(int minValue,int maxValue)
	{
		int returnValue=minValue;
		new java.util.Random();
		returnValue=(int)((maxValue-minValue)*Math.random()+minValue);
		return returnValue;
	}
	
	/**
	 * 
	 * @author Shao.x
	 * @date 2018年10月18日
	 * @param level1 1类用户数
	 * @param level2 2类用户数
	 * @param level3 。。。
	 * @param level4。。。
	 * @param level5。。。
	 * @return
	 */
	public static List<String> getGroupUserIds(int level1, int level2,int level3, int level4, int level5) {
		List<String> ret = new ArrayList<String>();
		if(level1 >0) {
			String group1 = PropertiesUtil.getValue("user_level_1");
			if(StringUtils.isNotEmpty(group1)) {
				String[] userIds = group1.split(",");
				List<String> list = Arrays.asList(userIds);
				int index = 1;
				for(int i=0; i<list.size(); i++) {
					if(index > level1) {
						break;
					}
					String userId = list.get(i);
					if(JmService.peachMap.containsKey(userId)) {
						continue;
					}
					ret.add(userId);
					JmService.peachMap.put(userId, String.valueOf(level1));
					index++;
				}
			}
		} 
		if(level2 >0) {
			String group2 = PropertiesUtil.getValue("user_level_2");	
			if(StringUtils.isNotEmpty(group2)) {
				String[] userIds = group2.split(",");
				List<String> list = Arrays.asList(userIds);
				int index = 1;
				for(int i=0; i<list.size(); i++) {
					if(index > level2) {
						break;
					}
					String userId = list.get(i);
					if(JmService.peachMap.containsKey(userId)) {
						continue;
					}
					ret.add(userId);
					JmService.peachMap.put(userId, String.valueOf(level2));
					index++;
				}
			}
		}
		if(level3 >0) {
			String group3 = PropertiesUtil.getValue("user_level_3");
			if(StringUtils.isNotEmpty(group3)) {
				String[] userIds = group3.split(",");
				List<String> list = Arrays.asList(userIds);
				int index = 1;
				for(int i=0; i<list.size(); i++) {
					if(index > level3) {
						break;
					}
					String userId = list.get(i);
					if(JmService.peachMap.containsKey(userId)) {
						continue;
					}
					ret.add(userId);
					JmService.peachMap.put(userId, String.valueOf(level3));
					index++;
				}
			}
		} 
		if(level4 >0) {
			String group4 = PropertiesUtil.getValue("user_level_4");
			if(StringUtils.isNotEmpty(group4)) {
				String[] userIds = group4.split(",");
				List<String> list = Arrays.asList(userIds);
				int index = 1;
				for(int i=0; i<list.size(); i++) {
					if(index > level4) {
						break;
					}
					String userId = list.get(i);
					if(JmService.peachMap.containsKey(userId)) {
						continue;
					}
					ret.add(userId);
					JmService.peachMap.put(userId, String.valueOf(level4));
					index++;
				}
			}
		}
		if(level5 >0) {
			String group5 = PropertiesUtil.getValue("user_level_5");
			if(StringUtils.isNotEmpty(group5)) {
				String[] userIds = group5.split(",");
				List<String> list = Arrays.asList(userIds);
				int index = 1;
				for(int i=0; i<list.size(); i++) {
					if(index > level5) {
						break;
					}
					String userId = list.get(i);
					if(JmService.peachMap.containsKey(userId)) {
						continue;
					}
					ret.add(userId);
					JmService.peachMap.put(userId, String.valueOf(level5));
					index++;
				}
			}
		} 
		return ret;
	}
	
	
	public static List<String> getNoInroomUserIds(int num) {
		List<String> ret = new ArrayList<String>();
		if(num >0) {
			String group1 = PropertiesUtil.getValue("user_no_inroom");
			if(StringUtils.isNotEmpty(group1)) {
				String[] userIds = group1.split(",");
				List<String> list = Arrays.asList(userIds);
				int index = 1;
				for(int i=0; i<list.size(); i++) {
					if(index > num) {
						break;
					}
					String userId = list.get(i);
					if(JmService.peachMap.containsKey(userId)) {
						continue;
					}
					ret.add(userId);
					JmService.peachMap.put(userId, "no_inroom");
					index++;
				}
			}
		}
		return ret;
	}
	
	public static String getNickname() {
		String name = one[getRandom(1, one.length)] + fuhao[getRandom(1, fuhao.length)];
		long time = System.currentTimeMillis();
		if(time % 2 == 0) {
			while(true) {
				name = nogroup[getRandom(1, nogroup.length)];
				if(StringUtils.isNotEmpty(name)) {
					if(!nameMap.containsKey(name.hashCode())) {
						nameMap.put(String.valueOf(name.hashCode()), name);
						break;
					}
				}
			}
		} else {
			
		}
		return name;
	}
}
